        -:    0:Source:src/analysis/MSTAnalysis.cpp
        -:    1:// src/analysis/MSTAnalysis.cpp
        -:    2:#include "MSTAnalysis.hpp"
        -:    3:#include <algorithm>
        -:    4:#include <limits>
        -:    5:#include <queue>
        -:    6:#include <vector>
        -:    7:#include <iostream>
        -:    8:#include <future>
        -:    9:
       12:   10:std::future<int> calculateTotalWeightAsync(const std::vector<std::pair<int, std::pair<int, int>>> &mst)
        -:   11:{
       12:   12:    return std::async(std::launch::async, [&mst]()
        -:   13:                      {
       12:   14:        if (mst.empty())
        -:   15:        {
        1:   16:            std::cerr << "Warning: Empty MST passed to calculateTotalWeight" << std::endl;
        1:   17:            return 0;
        -:   18:        }
        -:   19:
       11:   20:        int totalWeight = 0;
       56:   21:        for (const auto& edge : mst)
        -:   22:        {
       45:   23:            if (edge.first < 0)
        -:   24:            {
        1:   25:                std::cerr << "Warning: Negative weight encountered in MST" << std::endl;
        1:   26:                continue;
        -:   27:            }
       44:   28:            totalWeight += edge.first;
        -:   29:        }
       35:   30:        return totalWeight; });
        -:   31:}
        -:   32:
        6:   33:std::future<int> findLongestDistanceAsync(const Graph &graph, const std::vector<std::pair<int, std::pair<int, int>>> &mst)
        -:   34:{
        6:   35:    return std::async(std::launch::async, [&graph, &mst]()
        -:   36:                      {
        6:   37:        int V = graph.getVertices();
        6:   38:        std::vector<std::vector<int>> dist(V, std::vector<int>(V, std::numeric_limits<int>::max()));
        -:   39:
        -:   40:        // Initialize distances with MST edges
       30:   41:        for (const auto& edge : mst)
        -:   42:        {
       24:   43:            int u = edge.second.first, v = edge.second.second, w = edge.first;
       24:   44:            dist[u][v] = dist[v][u] = w;
        -:   45:        }
        -:   46:
        -:   47:        // Floyd-Warshall algorithm to find all-pairs shortest paths
       36:   48:        for (int k = 0; k < V; k++)
        -:   49:        {
      180:   50:            for (int i = 0; i < V; i++)
        -:   51:            {
      900:   52:                for (int j = 0; j < V; j++)
        -:   53:                {
     1370:   54:                    if (dist[i][k] != std::numeric_limits<int>::max() &&
     1370:   55:                        dist[k][j] != std::numeric_limits<int>::max() &&
      568:   56:                        dist[i][k] + dist[k][j] < dist[i][j])
        -:   57:                    {
      102:   58:                        dist[i][j] = dist[i][k] + dist[k][j];
        -:   59:                    }
        -:   60:                }
        -:   61:            }
        -:   62:        }
        -:   63:
        -:   64:        // Find the maximum distance
        6:   65:        int maxDist = 0;
       36:   66:        for (int i = 0; i < V; i++)
        -:   67:        {
       90:   68:            for (int j = i + 1; j < V; j++)
        -:   69:            {
       60:   70:                if (dist[i][j] != std::numeric_limits<int>::max())
        -:   71:                {
       60:   72:                    maxDist = std::max(maxDist, dist[i][j]);
        -:   73:                }
        -:   74:            }
        -:   75:        }
        -:   76:        //for debug
        -:   77:        // std::cout << "Longest distance: " << maxDist << std::endl;
       24:   78:        return maxDist; });
        -:   79:}
        -:   80:
        6:   81:std::future<double> calculateAverageDistanceAsync(const Graph &graph, const std::vector<std::pair<int, std::pair<int, int>>> &mst)
        -:   82:{
        6:   83:    return std::async(std::launch::async, [&graph, &mst]()
        -:   84:                      {
        6:   85:        int V = graph.getVertices();
        6:   86:        std::vector<std::vector<int>> dist(V, std::vector<int>(V, std::numeric_limits<int>::max()));
        -:   87:
        -:   88:        // Initialize distances with MST edges
       30:   89:        for (const auto& edge : mst)
        -:   90:        {
       24:   91:            int u = edge.second.first, v = edge.second.second, w = edge.first;
       24:   92:            dist[u][v] = dist[v][u] = w;
        -:   93:        }
        -:   94:
        -:   95:        // Floyd-Warshall algorithm to find all-pairs shortest paths
       36:   96:        for (int k = 0; k < V; k++)
        -:   97:        {
      180:   98:            for (int i = 0; i < V; i++)
        -:   99:            {
      900:  100:                for (int j = 0; j < V; j++)
        -:  101:                {
     1370:  102:                    if (dist[i][k] != std::numeric_limits<int>::max() &&
     1370:  103:                        dist[k][j] != std::numeric_limits<int>::max() &&
      568:  104:                        dist[i][k] + dist[k][j] < dist[i][j])
        -:  105:                    {
      102:  106:                        dist[i][j] = dist[i][k] + dist[k][j];
        -:  107:                    }
        -:  108:                }
        -:  109:            }
        -:  110:        }
        -:  111:
        -:  112:        // Calculate average distance
        6:  113:        long long sum = 0;
        6:  114:        int count = 0;
       36:  115:        for (int i = 0; i < V; i++)
        -:  116:        {
       90:  117:            for (int j = i + 1; j < V; j++)
        -:  118:            {
       60:  119:                if (dist[i][j] != std::numeric_limits<int>::max())
        -:  120:                {
       60:  121:                    sum += dist[i][j];
       60:  122:                    count++;
        -:  123:                }
        -:  124:            }
        -:  125:        }
        -:  126:        //for debug
        -:  127:        // std::cout << "Average distance: " << (count > 0 ? static_cast<double>(sum) / count : 0.0) << std::endl;
      24*:  128:        return count > 0 ? static_cast<double>(sum) / count : 0.0; });
        -:  129:}
        -:  130:
        8:  131:std::future<int> findShortestMSTEdgeAsync(const std::vector<std::pair<int, std::pair<int, int>>> &mst)
        -:  132:{
        8:  133:    return std::async(std::launch::async, [&mst]()
        -:  134:                      {
        8:  135:        if (mst.empty())
        1:  136:            return 0;
        -:  137:
        7:  138:        int shortestEdge = std::numeric_limits<int>::max();
       36:  139:        for (const auto& edge : mst)
        -:  140:        {
       29:  141:            shortestEdge = std::min(shortestEdge, edge.first);
        -:  142:        }
        -:  143:        // std::cout << "Shortest MST edge: " << shortestEdge << std::endl;
       23:  144:        return shortestEdge; });
        -:  145:}
        -:  146:
    #####:  147:std::future<MSTAnalysis> analyzeMSTAsync(const Graph &graph, const std::vector<std::pair<int, std::pair<int, int>>> &mst)
        -:  148:{
    #####:  149:    return std::async(std::launch::async, [&graph, &mst]()
        -:  150:                      {
    #####:  151:        MSTAnalysis analysis;
        -:  152:
    #####:  153:        auto totalWeightFuture = calculateTotalWeightAsync(mst);
    #####:  154:        auto longestDistanceFuture = findLongestDistanceAsync(graph, mst);
    #####:  155:        auto averageDistanceFuture = calculateAverageDistanceAsync(graph, mst);
    #####:  156:        auto shortestMSTEdgeFuture = findShortestMSTEdgeAsync(mst);
        -:  157:
    #####:  158:        analysis.totalWeight = totalWeightFuture.get();
    #####:  159:        analysis.longestDistance = longestDistanceFuture.get();
    #####:  160:        analysis.averageDistance = averageDistanceFuture.get();
    #####:  161:        analysis.shortestMSTEdge = shortestMSTEdgeFuture.get();
    #####:  162:        analysis.mstEdges = mst;
        -:  163:
    #####:  164:        return analysis; });
        -:  165:}
