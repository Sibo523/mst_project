        -:    0:Source:src/mst/PrimMST.cpp
        -:    1:// src/mst/PrimMST.cpp
        -:    2:#include "PrimMST.hpp"
        -:    3:#include <limits>
        -:    4:#include <ostream>
        -:    5:#include <queue>
        -:    6:#include <iostream>
        4:    7:std::vector<std::pair<int, std::pair<int, int>>> PrimMST::findMST(const Graph &graph)
        -:    8:{
        4:    9:    std::vector<std::pair<int, std::pair<int, int>>> mst;
        4:   10:    int V = graph.getVertices();
        -:   11:
        4:   12:    if (V == 0)
        -:   13:    {
    #####:   14:        std::cout << "Warning: Empty graph passed to PrimMST::findMST" << std::endl;
    #####:   15:        return mst;
        -:   16:    }
        4:   17:    std::vector<bool> inMST(V, false);
        4:   18:    std::vector<int> key(V, std::numeric_limits<int>::max());
        4:   19:    std::vector<int> parent(V, -1);
        -:   20:
        -:   21:    // Use a min-heap priority queue
        4:   22:    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
        -:   23:
        -:   24:    // Start with the first vertex
        4:   25:    pq.push({0, 0});
        4:   26:    key[0] = 0;
        -:   27:
       24:   28:    while (!pq.empty() && mst.size() < V - 1)
        -:   29:    {
       20:   30:        int u = pq.top().second;
       20:   31:        pq.pop();
        -:   32:
      20*:   33:        if (inMST[u])
    #####:   34:            continue;
        -:   35:
       20:   36:        inMST[u] = true;
        -:   37:
        -:   38:        // Add edge to MST
       20:   39:        if (parent[u] != -1)
        -:   40:        {
       16:   41:            mst.push_back({key[u], {parent[u], u}});
        -:   42:        }
        -:   43:
        -:   44:        // Update key values of adjacent vertices
       48:   45:        for (const auto &[v, weight] : graph.getNeighbors(u))
        -:   46:        {
       28:   47:            if (!inMST[v] && weight < key[v])
        -:   48:            {
       16:   49:                parent[v] = u;
       16:   50:                key[v] = weight;
       16:   51:                pq.push({key[v], v});
        -:   52:            }
        -:   53:        }
        -:   54:    }
        -:   55:
        4:   56:    return mst;
        4:   57:}
    #####:   58:int PrimMST::getMinKeyVertex(const std::vector<int> &key, const std::vector<bool> &mstSet, int V)
        -:   59:{
    #####:   60:    int min = std::numeric_limits<int>::max();
    #####:   61:    int min_index = -1;
        -:   62:
    #####:   63:    for (int v = 0; v < V; v++)
        -:   64:    {
    #####:   65:        if (!mstSet[v] && key[v] < min)
        -:   66:        {
    #####:   67:            min = key[v];
    #####:   68:            min_index = v;
        -:   69:        }
        -:   70:    }
        -:   71:
    #####:   72:    return min_index;
        -:   73:}
