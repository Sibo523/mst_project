        -:    0:Source:src/tests/pipeline-tests.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "utils/Pipeline.hpp"
        -:    3:#include <string>
        -:    4:#include <memory>
        -:    5:
        -:    6:class PipelineTest : public ::testing::Test {
        -:    7:protected:
        -:    8:    Pipeline pipeline;
        -:    9:};
        -:   10:
        4:   11:TEST_F(PipelineTest, EmptyPipeline) {
        1:   12:    auto inputGen = []() -> std::shared_ptr<void> {
        1:   13:        return std::make_shared<int>(5);
        -:   14:    };
        -:   15:
        1:   16:    int result = pipeline.process<int>(inputGen);
       1*:   17:    EXPECT_EQ(result, 5);
        1:   18:}
------------------
_ZN31PipelineTest_EmptyPipeline_TestC2Ev:
        1:   11:TEST_F(PipelineTest, EmptyPipeline) {
------------------
_ZN31PipelineTest_EmptyPipeline_TestD0Ev:
        1:   11:TEST_F(PipelineTest, EmptyPipeline) {
------------------
_ZN31PipelineTest_EmptyPipeline_TestD2Ev:
        1:   11:TEST_F(PipelineTest, EmptyPipeline) {
------------------
_ZN31PipelineTest_EmptyPipeline_Test8TestBodyEv:
        1:   11:TEST_F(PipelineTest, EmptyPipeline) {
        -:   12:    auto inputGen = []() -> std::shared_ptr<void> {
        -:   13:        return std::make_shared<int>(5);
        -:   14:    };
        -:   15:
        1:   16:    int result = pipeline.process<int>(inputGen);
       1*:   17:    EXPECT_EQ(result, 5);
        1:   18:}
------------------
        -:   19:
        4:   20:TEST_F(PipelineTest, SingleStage) {
        2:   21:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        1:   22:        int value = *std::static_pointer_cast<int>(input);
        1:   23:        return std::make_shared<int>(value * 2);
        -:   24:    });
        -:   25:
        1:   26:    auto inputGen = []() -> std::shared_ptr<void> {
        1:   27:        return std::make_shared<int>(5);
        -:   28:    };
        -:   29:
        1:   30:    int result = pipeline.process<int>(inputGen);
       1*:   31:    EXPECT_EQ(result, 10);
        1:   32:}
------------------
_ZN29PipelineTest_SingleStage_TestC2Ev:
        1:   20:TEST_F(PipelineTest, SingleStage) {
------------------
_ZN29PipelineTest_SingleStage_TestD0Ev:
        1:   20:TEST_F(PipelineTest, SingleStage) {
------------------
_ZN29PipelineTest_SingleStage_TestD2Ev:
        1:   20:TEST_F(PipelineTest, SingleStage) {
------------------
_ZN29PipelineTest_SingleStage_Test8TestBodyEv:
        1:   20:TEST_F(PipelineTest, SingleStage) {
        1:   21:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        -:   22:        int value = *std::static_pointer_cast<int>(input);
        -:   23:        return std::make_shared<int>(value * 2);
        -:   24:    });
        -:   25:
        -:   26:    auto inputGen = []() -> std::shared_ptr<void> {
        -:   27:        return std::make_shared<int>(5);
        -:   28:    };
        -:   29:
        1:   30:    int result = pipeline.process<int>(inputGen);
       1*:   31:    EXPECT_EQ(result, 10);
        1:   32:}
------------------
        -:   33:
        4:   34:TEST_F(PipelineTest, MultipleStages) {
        2:   35:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        1:   36:        int value = *std::static_pointer_cast<int>(input);
        1:   37:        return std::make_shared<int>(value * 2);
        -:   38:    });
        -:   39:
        2:   40:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        1:   41:        int value = *std::static_pointer_cast<int>(input);
        1:   42:        return std::make_shared<int>(value + 5);
        -:   43:    });
        -:   44:
        1:   45:    auto inputGen = []() -> std::shared_ptr<void> {
        1:   46:        return std::make_shared<int>(5);
        -:   47:    };
        -:   48:
        1:   49:    int result = pipeline.process<int>(inputGen);
       1*:   50:    EXPECT_EQ(result, 15);
        1:   51:}
------------------
_ZN32PipelineTest_MultipleStages_TestC2Ev:
        1:   34:TEST_F(PipelineTest, MultipleStages) {
------------------
_ZN32PipelineTest_MultipleStages_TestD0Ev:
        1:   34:TEST_F(PipelineTest, MultipleStages) {
------------------
_ZN32PipelineTest_MultipleStages_TestD2Ev:
        1:   34:TEST_F(PipelineTest, MultipleStages) {
------------------
_ZN32PipelineTest_MultipleStages_Test8TestBodyEv:
        1:   34:TEST_F(PipelineTest, MultipleStages) {
        1:   35:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        -:   36:        int value = *std::static_pointer_cast<int>(input);
        -:   37:        return std::make_shared<int>(value * 2);
        -:   38:    });
        -:   39:
        1:   40:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        -:   41:        int value = *std::static_pointer_cast<int>(input);
        -:   42:        return std::make_shared<int>(value + 5);
        -:   43:    });
        -:   44:
        -:   45:    auto inputGen = []() -> std::shared_ptr<void> {
        -:   46:        return std::make_shared<int>(5);
        -:   47:    };
        -:   48:
        1:   49:    int result = pipeline.process<int>(inputGen);
       1*:   50:    EXPECT_EQ(result, 15);
        1:   51:}
------------------
        -:   52:
        4:   53:TEST_F(PipelineTest, DifferentTypes) {
        2:   54:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        1:   55:        int value = *std::static_pointer_cast<int>(input);
        1:   56:        return std::make_shared<std::string>(std::to_string(value));
        -:   57:    });
        -:   58:
        2:   59:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        1:   60:        std::string value = *std::static_pointer_cast<std::string>(input);
        2:   61:        return std::make_shared<std::string>(value + " processed");
        1:   62:    });
        -:   63:
        1:   64:    auto inputGen = []() -> std::shared_ptr<void> {
        1:   65:        return std::make_shared<int>(42);
        -:   66:    };
        -:   67:
        1:   68:    std::string result = pipeline.process<std::string>(inputGen);
       1*:   69:    EXPECT_EQ(result, "42 processed");
        1:   70:}
------------------
_ZN32PipelineTest_DifferentTypes_TestC2Ev:
        1:   53:TEST_F(PipelineTest, DifferentTypes) {
------------------
_ZN32PipelineTest_DifferentTypes_TestD0Ev:
        1:   53:TEST_F(PipelineTest, DifferentTypes) {
------------------
_ZN32PipelineTest_DifferentTypes_TestD2Ev:
        1:   53:TEST_F(PipelineTest, DifferentTypes) {
------------------
_ZN32PipelineTest_DifferentTypes_Test8TestBodyEv:
        1:   53:TEST_F(PipelineTest, DifferentTypes) {
        1:   54:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        -:   55:        int value = *std::static_pointer_cast<int>(input);
        -:   56:        return std::make_shared<std::string>(std::to_string(value));
        -:   57:    });
        -:   58:
        1:   59:    pipeline.addStage([](std::shared_ptr<void> input) -> std::shared_ptr<void> {
        -:   60:        std::string value = *std::static_pointer_cast<std::string>(input);
        -:   61:        return std::make_shared<std::string>(value + " processed");
        -:   62:    });
        -:   63:
        -:   64:    auto inputGen = []() -> std::shared_ptr<void> {
        -:   65:        return std::make_shared<int>(42);
        -:   66:    };
        -:   67:
        1:   68:    std::string result = pipeline.process<std::string>(inputGen);
       1*:   69:    EXPECT_EQ(result, "42 processed");
        1:   70:}
------------------
