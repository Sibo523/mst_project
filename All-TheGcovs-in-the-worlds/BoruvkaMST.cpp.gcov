        -:    0:Source:src/mst/BoruvkaMST.cpp
        -:    1:// src/mst/BoruvkaMST.cpp
        -:    2:#include "BoruvkaMST.hpp"
        -:    3:#include <algorithm>
        -:    4:#include <limits>
        -:    5:
        4:    6:std::vector<std::pair<int, std::pair<int, int>>> BoruvkaMST::findMST(const Graph &graph) {
        4:    7:    int V = graph.getVertices();
        4:    8:    std::vector<std::pair<int, std::pair<int, int>>> result;
        8:    9:    std::vector<int> parent(V);
        4:   10:    std::vector<int> rank(V, 0);
        4:   11:    std::vector<std::pair<int, std::pair<int, int>>> cheapest(V, {std::numeric_limits<int>::max(), {-1, -1}});
        -:   12:
        -:   13:    // Initialize each vertex as a separate component
       24:   14:    for (int i = 0; i < V; i++) {
       20:   15:        parent[i] = i;
        -:   16:    }
        -:   17:
        4:   18:    int numTrees = V;
        4:   19:    int MSTweight = 0;
        -:   20:
        8:   21:    while (numTrees > 1) {
        -:   22:        // Reset cheapest edges
        4:   23:        std::fill(cheapest.begin(), cheapest.end(), std::make_pair(std::numeric_limits<int>::max(), std::make_pair(-1, -1)));
        -:   24:
        -:   25:        // Find the cheapest edge for each component
       24:   26:        for (int i = 0; i < V; i++) {
       48:   27:            for (const auto &edge : graph.getNeighbors(i)) {
       28:   28:                int dest = edge.first;
       28:   29:                int weight = edge.second;
        -:   30:
       28:   31:                int set1 = find(parent, i);
       28:   32:                int set2 = find(parent, dest);
        -:   33:
       28:   34:                if (set1 != set2) {
       28:   35:                    if (weight < cheapest[set1].first) {
        4:   36:                        cheapest[set1] = {weight, {i, dest}};
        -:   37:                    }
       28:   38:                    if (weight < cheapest[set2].first) {
       16:   39:                        cheapest[set2] = {weight, {i, dest}};
        -:   40:                    }
        -:   41:                }
        -:   42:            }
        -:   43:        }
        -:   44:
        -:   45:        // Add the cheapest edges to the MST
       24:   46:        for (int i = 0; i < V; i++) {
       20:   47:            if (cheapest[i].second.first != -1) {
       20:   48:                int set1 = find(parent, cheapest[i].second.first);
       20:   49:                int set2 = find(parent, cheapest[i].second.second);
        -:   50:
       20:   51:                if (set1 != set2) {
       16:   52:                    MSTweight += cheapest[i].first;
       16:   53:                    unite(parent, rank, set1, set2);
       16:   54:                    result.push_back({cheapest[i].first, {cheapest[i].second.first, cheapest[i].second.second}});
       16:   55:                    numTrees--;
        -:   56:                }
        -:   57:            }
        -:   58:        }
        -:   59:    }
        -:   60:
        4:   61:    return result;
        4:   62:}
        -:   63:
      140:   64:int BoruvkaMST::find(std::vector<int> &parent, int i) {
      140:   65:    if (parent[i] != i) {
       12:   66:        parent[i] = find(parent, parent[i]);
        -:   67:    }
      140:   68:    return parent[i];
        -:   69:}
        -:   70:
       16:   71:void BoruvkaMST::unite(std::vector<int> &parent, std::vector<int> &rank, int x, int y) {
       16:   72:    int xroot = find(parent, x);
       16:   73:    int yroot = find(parent, y);
        -:   74:
       16:   75:    if (rank[xroot] < rank[yroot]) {
    #####:   76:        parent[xroot] = yroot;
       16:   77:    } else if (rank[xroot] > rank[yroot]) {
       12:   78:        parent[yroot] = xroot;
        -:   79:    } else {
        4:   80:        parent[yroot] = xroot;
        4:   81:        rank[xroot]++;
        -:   82:    }
       16:   83:}
