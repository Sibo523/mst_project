        -:    0:Source:src/tests/graph-tests.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "graph/Graph.hpp"
        -:    3:#include <stdexcept>
        -:    4:#include <algorithm>
        -:    5:
        -:    6:class GraphTest : public ::testing::Test
        -:    7:{
        -:    8:protected:
        -:    9:    Graph graph{5}; // Create a graph with 5 vertices
        -:   10:};
        -:   11:
        4:   12:TEST_F(GraphTest, AddEdge)
        -:   13:{
       1*:   14:    EXPECT_NO_THROW(graph.addEdge(0, 1, 10));
       1*:   15:    EXPECT_NO_THROW(graph.addEdge(1, 2, 20));
       1*:   16:    EXPECT_NO_THROW(graph.addEdge(2, 3, 30));
       1*:   17:    EXPECT_NO_THROW(graph.addEdge(3, 4, 40));
       1*:   18:    EXPECT_NO_THROW(graph.addEdge(4, 0, 50));
        1:   19:}
------------------
_ZN22GraphTest_AddEdge_TestC2Ev:
        1:   12:TEST_F(GraphTest, AddEdge)
------------------
_ZN22GraphTest_AddEdge_TestD0Ev:
        1:   12:TEST_F(GraphTest, AddEdge)
------------------
_ZN22GraphTest_AddEdge_TestD2Ev:
        1:   12:TEST_F(GraphTest, AddEdge)
------------------
_ZN22GraphTest_AddEdge_Test8TestBodyEv:
        1:   12:TEST_F(GraphTest, AddEdge)
        -:   13:{
       1*:   14:    EXPECT_NO_THROW(graph.addEdge(0, 1, 10));
       1*:   15:    EXPECT_NO_THROW(graph.addEdge(1, 2, 20));
       1*:   16:    EXPECT_NO_THROW(graph.addEdge(2, 3, 30));
       1*:   17:    EXPECT_NO_THROW(graph.addEdge(3, 4, 40));
       1*:   18:    EXPECT_NO_THROW(graph.addEdge(4, 0, 50));
        1:   19:}
------------------
        -:   20:
        4:   21:TEST_F(GraphTest, AddEdgeOutOfRange)
        -:   22:{
       1*:   23:    EXPECT_THROW(graph.addEdge(-1, 1, 10), std::out_of_range);
       1*:   24:    EXPECT_THROW(graph.addEdge(0, 5, 10), std::out_of_range);
       1*:   25:    EXPECT_THROW(graph.addEdge(5, 0, 10), std::out_of_range);
        1:   26:}
------------------
_ZN32GraphTest_AddEdgeOutOfRange_TestC2Ev:
        1:   21:TEST_F(GraphTest, AddEdgeOutOfRange)
------------------
_ZN32GraphTest_AddEdgeOutOfRange_TestD0Ev:
        1:   21:TEST_F(GraphTest, AddEdgeOutOfRange)
------------------
_ZN32GraphTest_AddEdgeOutOfRange_TestD2Ev:
        1:   21:TEST_F(GraphTest, AddEdgeOutOfRange)
------------------
_ZN32GraphTest_AddEdgeOutOfRange_Test8TestBodyEv:
        1:   21:TEST_F(GraphTest, AddEdgeOutOfRange)
        -:   22:{
       1*:   23:    EXPECT_THROW(graph.addEdge(-1, 1, 10), std::out_of_range);
       1*:   24:    EXPECT_THROW(graph.addEdge(0, 5, 10), std::out_of_range);
       1*:   25:    EXPECT_THROW(graph.addEdge(5, 0, 10), std::out_of_range);
        1:   26:}
------------------
        -:   27:
        4:   28:TEST_F(GraphTest, GetNeighbors)
        -:   29:{
        1:   30:    graph.addEdge(0, 1, 10);
        1:   31:    graph.addEdge(0, 2, 20);
        -:   32:
        1:   33:    const auto &neighbors = graph.getNeighbors(0);
       1*:   34:    EXPECT_EQ(neighbors.size(), 2);
       1*:   35:    EXPECT_EQ(neighbors[0], std::make_pair(1, 10));
       1*:   36:    EXPECT_EQ(neighbors[1], std::make_pair(2, 20));
        1:   37:}
------------------
_ZN27GraphTest_GetNeighbors_TestC2Ev:
        1:   28:TEST_F(GraphTest, GetNeighbors)
------------------
_ZN27GraphTest_GetNeighbors_TestD0Ev:
        1:   28:TEST_F(GraphTest, GetNeighbors)
------------------
_ZN27GraphTest_GetNeighbors_TestD2Ev:
        1:   28:TEST_F(GraphTest, GetNeighbors)
------------------
_ZN27GraphTest_GetNeighbors_Test8TestBodyEv:
        1:   28:TEST_F(GraphTest, GetNeighbors)
        -:   29:{
        1:   30:    graph.addEdge(0, 1, 10);
        1:   31:    graph.addEdge(0, 2, 20);
        -:   32:
        1:   33:    const auto &neighbors = graph.getNeighbors(0);
       1*:   34:    EXPECT_EQ(neighbors.size(), 2);
       1*:   35:    EXPECT_EQ(neighbors[0], std::make_pair(1, 10));
       1*:   36:    EXPECT_EQ(neighbors[1], std::make_pair(2, 20));
        1:   37:}
------------------
        -:   38:
        4:   39:TEST_F(GraphTest, GetNeighborsOutOfRange)
        -:   40:{
       1*:   41:    EXPECT_THROW(graph.getNeighbors(-1), std::out_of_range);
       1*:   42:    EXPECT_THROW(graph.getNeighbors(5), std::out_of_range);
        1:   43:}
------------------
_ZN37GraphTest_GetNeighborsOutOfRange_TestC2Ev:
        1:   39:TEST_F(GraphTest, GetNeighborsOutOfRange)
------------------
_ZN37GraphTest_GetNeighborsOutOfRange_TestD0Ev:
        1:   39:TEST_F(GraphTest, GetNeighborsOutOfRange)
------------------
_ZN37GraphTest_GetNeighborsOutOfRange_TestD2Ev:
        1:   39:TEST_F(GraphTest, GetNeighborsOutOfRange)
------------------
_ZN37GraphTest_GetNeighborsOutOfRange_Test8TestBodyEv:
        1:   39:TEST_F(GraphTest, GetNeighborsOutOfRange)
        -:   40:{
       1*:   41:    EXPECT_THROW(graph.getNeighbors(-1), std::out_of_range);
       1*:   42:    EXPECT_THROW(graph.getNeighbors(5), std::out_of_range);
        1:   43:}
------------------
        -:   44:
        4:   45:TEST_F(GraphTest, GetEdges)
        -:   46:{
        1:   47:    graph.addEdge(0, 1, 10);
        1:   48:    graph.addEdge(1, 2, 20);
        1:   49:    graph.addEdge(2, 3, 30);
        -:   50:
        1:   51:    auto edges = graph.getEdges();
       1*:   52:    EXPECT_EQ(edges.size(), 3);
       1*:   53:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(0, std::make_pair(1, 10))) != edges.end());
       1*:   54:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(1, std::make_pair(2, 20))) != edges.end());
       1*:   55:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(2, std::make_pair(3, 30))) != edges.end());
        1:   56:}
------------------
_ZN23GraphTest_GetEdges_TestC2Ev:
        1:   45:TEST_F(GraphTest, GetEdges)
------------------
_ZN23GraphTest_GetEdges_TestD0Ev:
        1:   45:TEST_F(GraphTest, GetEdges)
------------------
_ZN23GraphTest_GetEdges_TestD2Ev:
        1:   45:TEST_F(GraphTest, GetEdges)
------------------
_ZN23GraphTest_GetEdges_Test8TestBodyEv:
        1:   45:TEST_F(GraphTest, GetEdges)
        -:   46:{
        1:   47:    graph.addEdge(0, 1, 10);
        1:   48:    graph.addEdge(1, 2, 20);
        1:   49:    graph.addEdge(2, 3, 30);
        -:   50:
        1:   51:    auto edges = graph.getEdges();
       1*:   52:    EXPECT_EQ(edges.size(), 3);
       1*:   53:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(0, std::make_pair(1, 10))) != edges.end());
       1*:   54:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(1, std::make_pair(2, 20))) != edges.end());
       1*:   55:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(2, std::make_pair(3, 30))) != edges.end());
        1:   56:}
------------------
        -:   57:
        4:   58:TEST_F(GraphTest, GetVertices)
        -:   59:{
       1*:   60:    EXPECT_EQ(graph.getVertices(), 5);
        1:   61:}
------------------
_ZN26GraphTest_GetVertices_TestC2Ev:
        1:   58:TEST_F(GraphTest, GetVertices)
------------------
_ZN26GraphTest_GetVertices_TestD0Ev:
        1:   58:TEST_F(GraphTest, GetVertices)
------------------
_ZN26GraphTest_GetVertices_TestD2Ev:
        1:   58:TEST_F(GraphTest, GetVertices)
------------------
_ZN26GraphTest_GetVertices_Test8TestBodyEv:
        1:   58:TEST_F(GraphTest, GetVertices)
        -:   59:{
       1*:   60:    EXPECT_EQ(graph.getVertices(), 5);
        1:   61:}
------------------
