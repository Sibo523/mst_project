        -:    0:Source:src/server/Server.cpp
        -:    1:// src/server/Server.cpp
        -:    2:#include "Server.hpp"
        -:    3:#include "../factory/MSTFactory.hpp"
        -:    4:#include "../analysis/MSTAnalysis.hpp"
        -:    5:#include <iostream>
        -:    6:#include <sstream>
        -:    7:#include <unistd.h>
        -:    8:#include <cstring>
        -:    9:
    #####:   10:Server::Server(int port, int threads)
    #####:   11:    : currentGraph(0),
    #####:   12:      threadPool(threads),
    #####:   13:      pipeline(),
    #####:   14:      port(port),
    #####:   15:      running(false)
        -:   16:{
    #####:   17:    pipeline.addStage([this](std::shared_ptr<void> input)
    #####:   18:                      { return this->analyzeMSTStage(input); });
    #####:   19:    pipeline.addStage([this](std::shared_ptr<void> input)
    #####:   20:                      { return this->formatResultStage(input); });
    #####:   21:}
    #####:   22:void Server::start()
        -:   23:{
    #####:   24:    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    #####:   25:    if (serverSocket == -1)
        -:   26:    {
    #####:   27:        std::cerr << "Failed to create socket\n";
    #####:   28:        return;
        -:   29:    }
        -:   30:
        -:   31:    sockaddr_in serverAddr;
    #####:   32:    serverAddr.sin_family = AF_INET;
    #####:   33:    serverAddr.sin_addr.s_addr = INADDR_ANY;
    #####:   34:    serverAddr.sin_port = htons(port);
        -:   35:
        -:   36:    // Set SO_REUSEADDR option
    #####:   37:    int opt = 1;
    #####:   38:    if (setsockopt(serverSocket, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt)) < 0)
        -:   39:    {
    #####:   40:        std::cerr << "Failed to set SO_REUSEADDR option\n";
    #####:   41:        return;
        -:   42:    }
        -:   43:
    #####:   44:    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)
        -:   45:    {
    #####:   46:        std::cerr << "Failed to bind to port " << port << "\n";
    #####:   47:        return;
        -:   48:    }
        -:   49:
    #####:   50:    if (listen(serverSocket, 3) < 0)
        -:   51:    {
    #####:   52:        std::cerr << "Failed to listen on socket\n";
    #####:   53:        return;
        -:   54:    }
        -:   55:
    #####:   56:    std::cout << "Server is listening on port " << port << "\n";
        -:   57:
    #####:   58:    running = true;
    #####:   59:    while (running)
        -:   60:    {
        -:   61:        sockaddr_in clientAddr;
    #####:   62:        socklen_t clientAddrLen = sizeof(clientAddr);
    #####:   63:        int clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &clientAddrLen);
        -:   64:
    #####:   65:        if (clientSocket < 0)
        -:   66:        {
    #####:   67:            std::cerr << "Failed to accept client connection\n";
    #####:   68:            continue;
        -:   69:        }
        -:   70:
    #####:   71:        std::cout << "Accepted new client connection\n";
        -:   72:
    #####:   73:        threadPool.enqueue([this, clientSocket]()
    #####:   74:                           { this->handleClient(clientSocket); });
        -:   75:    }
        -:   76:}
        -:   77:
    #####:   78:void Server::handleClient(int clientSocket)
        -:   79:{
    #####:   80:    char buffer[1024] = {0};
        -:   81:    while (true)
        -:   82:    {
    #####:   83:        memset(buffer, 0, sizeof(buffer));
        -:   84:        // sendMessage(clientSocket, "Enter command:\n");
    #####:   85:        int valread = read(clientSocket, buffer, 1024);
    #####:   86:        if (valread <= 0)
        -:   87:        {
    #####:   88:            std::cout << "Client disconnected\n";
    #####:   89:            break;
        -:   90:        }
    #####:   91:        std::string request(buffer);
    #####:   92:        std::cout << "Received request: " << request << std::endl;
        -:   93:
    #####:   94:        if (request == "exit\n")
        -:   95:        {
    #####:   96:            std::cout << "Client requested exit\n";
    #####:   97:            break;
        -:   98:        }
        -:   99:
    #####:  100:        std::string response = handleRequest(request, clientSocket);
    #####:  101:        sendMessage(clientSocket, response);
    #####:  102:    }
    #####:  103:    close(clientSocket);
    #####:  104:}
    #####:  105:void Server::stop()
        -:  106:{
    #####:  107:    running = false;
    #####:  108:    close(serverSocket);
    #####:  109:}
        -:  110:
    #####:  111:std::string Server::handleRequest(const std::string &request, int clientSocket)
        -:  112:{
    #####:  113:    std::istringstream iss(request);
    #####:  114:    std::string command;
    #####:  115:    iss >> command;
        -:  116:
    #####:  117:    if (command == "addGraph")
        -:  118:    {
    #####:  119:        sendMessage(clientSocket, "Enter the number of vertices:");
    #####:  120:        std::string input = getClientInput(clientSocket);
    #####:  121:        int V = std::stoi(input);
    #####:  122:        Graph newGraph(V);
        -:  123:
        -:  124:        while (true)
        -:  125:        {
    #####:  126:            sendMessage(clientSocket, "Enter edges (src dest weight), '-1' when finished:\n");
    #####:  127:            input = getClientInput(clientSocket);
    #####:  128:            if (input == "-1" || input == "-1\n" || input == "-1\r\n")
    #####:  129:                break;
        -:  130:
    #####:  131:            std::istringstream edgeStream(input);
        -:  132:            int src, dest, weight;
    #####:  133:            if (edgeStream >> src >> dest >> weight)
        -:  134:            {
        -:  135:                try
        -:  136:                {
    #####:  137:                    newGraph.addEdge(src, dest, weight);
    #####:  138:                    sendMessage(clientSocket, "Edge added successfully. src: " + std::to_string(src) + ", dest: " + std::to_string(dest) + ", weight: " + std::to_string(weight) + "\n");
        -:  139:                }
    =====:  140:                catch (const std::exception &e)
        -:  141:                {
    =====:  142:                    sendMessage(clientSocket, e.what() + '\n');
    =====:  143:                }
        -:  144:            }
        -:  145:            else
        -:  146:            {
    #####:  147:                sendMessage(clientSocket, "Invalid input. Try again or type 'done':\n");
        -:  148:            }
    #####:  149:        }
        -:  150:
    #####:  151:        addGraph(newGraph);
    #####:  152:        return "Graph added successfully.\n";
    #####:  153:    }
    #####:  154:    else if (command == "updateGraph")
        -:  155:    {
    #####:  156:        sendMessage(clientSocket, "Enter graph changes:");
    #####:  157:        std::string changes = getClientInput(clientSocket);
    #####:  158:        updateGraph(changes);
    #####:  159:        return "Graph updated successfully.";
    #####:  160:    }
    #####:  161:    else if (command == "solveMST")
        -:  162:    {
    #####:  163:        sendMessage(clientSocket, "Enter MST algorithm (e.g., 'Kruskal', 'Prim', 'IntegerMST', 'Tarjan', 'Boruvka'):");
    #####:  164:        std::string algorithm = getClientInput(clientSocket);
    #####:  165:        algorithm = trimString(algorithm); // Remove any leading/trailing whitespace
    #####:  166:        std::cout << "Algorithm received: '" << algorithm << "'" << std::endl;
        -:  167:
    #####:  168:        std::vector<std::string> validAlgorithms = {"Kruskal", "Prim", "IntegerMST", "Tarjan", "Boruvka"};
    #####:  169:        if (std::find(validAlgorithms.begin(), validAlgorithms.end(), algorithm) != validAlgorithms.end())
        -:  170:        {
    #####:  171:            std::cout << "Solving MST with algorithm: " << algorithm << std::endl;
    #####:  172:            std::cout << currentGraph.getVertices() << std::endl;
    #####:  173:            std::string result = solveMST(algorithm);
    #####:  174:            std::cout << "MST result: " << result << std::endl;
    #####:  175:            return result;
    #####:  176:        }
        -:  177:        else
        -:  178:        {
    #####:  179:            std::string errorMsg = "Invalid MST algorithm: '" + algorithm + "'. Valid options are: Kruskal, Prim, IntegerMST, Tarjan, Boruvka.\n";
    #####:  180:            sendMessage(clientSocket, errorMsg);
    #####:  181:            return errorMsg;
    #####:  182:        }
    #####:  183:    }
    #####:  184:    else if (command == "exit")
        -:  185:    {
    #####:  186:        stop();
    #####:  187:        return "Server stopped.";
        -:  188:    }
    #####:  189:    else if (command == "help")
        -:  190:    {
    #####:  191:        std::string helpMsg = "Available commands:\n";
    #####:  192:        helpMsg += "addGraph: Add a new graph\n";
    #####:  193:        helpMsg += "updateGraph: Update the current graph\n";
    #####:  194:        helpMsg += "solveMST: Solve the Minimum Spanning Tree problem\n";
    #####:  195:        helpMsg += "exit: Stop the server\n";
    #####:  196:        return helpMsg;
    #####:  197:    }
    #####:  198:    else if (command == "clear")
        -:  199:    {
        -:  200:        // maybe if I have time.
        -:  201:    }
        -:  202:
        -:  203:    else
        -:  204:    {
    #####:  205:        return "Unknown command: " + command;
        -:  206:    }
    #####:  207:}
        -:  208:
        -:  209:// Helper function to trim whitespace from a string
    #####:  210:std::string trimString(const std::string &str)
        -:  211:{
    #####:  212:    size_t first = str.find_first_not_of(" \t\n\r");
    #####:  213:    if (first == std::string::npos)
    #####:  214:        return "";
    #####:  215:    size_t last = str.find_last_not_of(" \t\n\r");
    #####:  216:    return str.substr(first, (last - first + 1));
        -:  217:}
    #####:  218:void Server::sendMessage(int clientSocket, const std::string &message)
        -:  219:{
    #####:  220:    send(clientSocket, message.c_str(), message.length(), 0);
    #####:  221:}
        -:  222:
    #####:  223:std::string Server::getClientInput(int clientSocket)
        -:  224:{
    #####:  225:    char buffer[1024] = {0};
    #####:  226:    int valread = read(clientSocket, buffer, 1024);
    #####:  227:    if (valread <= 0)
        -:  228:    {
    #####:  229:        return "";
        -:  230:    }
    #####:  231:    return std::string(buffer);
        -:  232:}
        -:  233:
    #####:  234:void Server::addGraph(const Graph &graph)
        -:  235:{
    #####:  236:    currentGraph = graph;
    #####:  237:    std::cout << "Graph added successfully." << std::endl;
    #####:  238:}
        -:  239:
    #####:  240:void Server::updateGraph(const std::string &changes)
        -:  241:{
    #####:  242:    std::istringstream iss(changes);
        -:  243:    int src, dest, weight;
    #####:  244:    while (iss >> src >> dest >> weight)
        -:  245:    {
    #####:  246:        currentGraph.addEdge(src, dest, weight);
        -:  247:    }
    #####:  248:    std::cout << "Graph updated successfully." << std::endl;
    #####:  249:}
        -:  250:
    #####:  251:std::string Server::solveMST(const std::string &algorithm)
        -:  252:{
    #####:  253:    std::cout << "Solving MST with algorithm: " << algorithm << std::endl;
        -:  254:
    #####:  255:    auto mstAlgo = MSTFactory::createMSTAlgorithm(algorithm);
    #####:  256:    if (!mstAlgo)
        -:  257:    {
    #####:  258:        std::cerr << "Failed to create MST algorithm: " << algorithm << std::endl;
    #####:  259:        return "Error: Failed to create MST algorithm.";
        -:  260:    }
    #####:  261:    std::cout << "before findMST" << std::endl;
    #####:  262:    std::vector<std::pair<int, std::pair<int, int>>> mst;
        -:  263:    try
        -:  264:    {
    #####:  265:        mst = mstAlgo->findMST(currentGraph);
        -:  266:    }
    =====:  267:    catch (const std::exception &e)
        -:  268:    {
    =====:  269:        std::cerr << "Exception in findMST: " << e.what() << std::endl;
    =====:  270:        return "Error: Exception occurred while finding MST.";
    =====:  271:    }
        -:  272:
        -:  273:    try
        -:  274:    {
    #####:  275:        std::cout << "before pipeline::process" << std::endl;
    #####:  276:        auto result = pipeline.process<std::string>(
    #####:  277:            [&]() -> std::shared_ptr<void>
        -:  278:            {
    #####:  279:                return std::make_shared<std::pair<std::string, std::vector<std::pair<int, std::pair<int, int>>>>>(algorithm, mst);
    #####:  280:            });
        -:  281:
    #####:  282:        return result;
    #####:  283:    }
    =====:  284:    catch (const std::exception &e)
        -:  285:    {
    =====:  286:        std::cerr << "Exception in pipeline processing: " << e.what() << std::endl;
    =====:  287:        return "Error: Exception occurred while processing MST result.";
    =====:  288:    }
    #####:  289:}
        -:  290:
        -:  291:// true
    #####:  292:std::shared_ptr<void> Server::analyzeMSTStage(std::shared_ptr<void> input)
        -:  293:{
        -:  294:    try
        -:  295:    {
    #####:  296:        auto pair = std::static_pointer_cast<std::pair<std::string, std::vector<std::pair<int, std::pair<int, int>>>>>(input);
    #####:  297:        auto &algorithm = pair->first;
    #####:  298:        auto &mst = pair->second;
        -:  299:
    #####:  300:        MSTAnalysis analysis;
        -:  301:
    #####:  302:        auto totalWeightFuture = calculateTotalWeightAsync(mst);
    #####:  303:        auto longestDistanceFuture = findLongestDistanceAsync(currentGraph, mst);
    #####:  304:        auto averageDistanceFuture = calculateAverageDistanceAsync(currentGraph, mst);
    #####:  305:        auto shortestMSTEdgeFuture = findShortestMSTEdgeAsync(mst);
        -:  306:
        -:  307:        // Wait for all futures to complete
    #####:  308:        analysis.totalWeight = totalWeightFuture.get();
    #####:  309:        analysis.longestDistance = longestDistanceFuture.get();
    #####:  310:        analysis.averageDistance = averageDistanceFuture.get();
    #####:  311:        analysis.shortestMSTEdge = shortestMSTEdgeFuture.get();
    #####:  312:        analysis.mstEdges = mst;
        -:  313:
    #####:  314:        return std::make_shared<std::pair<std::string, MSTAnalysis>>(algorithm, analysis);
    #####:  315:    }
    =====:  316:    catch (const std::exception &e)
        -:  317:    {
    =====:  318:        std::cerr << "Exception in analyzeMSTStage: " << e.what() << std::endl;
    =====:  319:        throw;
    =====:  320:    }
        -:  321:}
    #####:  322:std::shared_ptr<void> Server::formatResultStage(std::shared_ptr<void> input)
        -:  323:{
    #####:  324:    auto pair = std::static_pointer_cast<std::pair<std::string, MSTAnalysis>>(input);
    #####:  325:    auto &algorithm = pair->first;
    #####:  326:    auto &analysis = pair->second;
        -:  327:
    #####:  328:    std::ostringstream oss;
    #####:  329:    oss << "MST Analysis using " << algorithm << " algorithm:\n";
    #####:  330:    oss << "Total weight: " << analysis.totalWeight << "\n";
    #####:  331:    oss << "Longest distance: " << analysis.longestDistance << "\n";
    #####:  332:    oss << "Average distance: " << analysis.averageDistance << "\n";
    #####:  333:    oss << "Shortest MST edge: " << analysis.shortestMSTEdge << "\n";
    #####:  334:    oss << "MST edges: ";
    #####:  335:    for (const auto &edge : analysis.mstEdges)
        -:  336:    {
    #####:  337:        oss << "(" << edge.second.first << "-" << edge.second.second << ", " << edge.first << ") ";
        -:  338:    }
    #####:  339:    oss << "\n";
        -:  340:
    #####:  341:    return std::make_shared<std::string>(oss.str());
    #####:  342:}
