        -:    0:Source:src/tests/Tree-tests.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "../Tree/Tree.hpp"
        -:    3:#include <stdexcept>
        -:    4:#include <algorithm>
        -:    5:
        -:    6:class TreeTest : public ::testing::Test
        -:    7:{
        -:    8:protected:
        -:    9:    Tree tree{5}; // Create a tree with 5 vertices
        -:   10:};
        -:   11:
        4:   12:TEST_F(TreeTest, AddEdge)
        -:   13:{
       1*:   14:    EXPECT_NO_THROW(tree.addEdge(0, 1, 10));
       1*:   15:    EXPECT_NO_THROW(tree.addEdge(1, 2, 20));
       1*:   16:    EXPECT_NO_THROW(tree.addEdge(2, 3, 30));
       1*:   17:    EXPECT_NO_THROW(tree.addEdge(3, 4, 40));
        1:   18:}
------------------
_ZN21TreeTest_AddEdge_TestC2Ev:
        1:   12:TEST_F(TreeTest, AddEdge)
------------------
_ZN21TreeTest_AddEdge_TestD0Ev:
        1:   12:TEST_F(TreeTest, AddEdge)
------------------
_ZN21TreeTest_AddEdge_TestD2Ev:
        1:   12:TEST_F(TreeTest, AddEdge)
------------------
_ZN21TreeTest_AddEdge_Test8TestBodyEv:
        1:   12:TEST_F(TreeTest, AddEdge)
        -:   13:{
       1*:   14:    EXPECT_NO_THROW(tree.addEdge(0, 1, 10));
       1*:   15:    EXPECT_NO_THROW(tree.addEdge(1, 2, 20));
       1*:   16:    EXPECT_NO_THROW(tree.addEdge(2, 3, 30));
       1*:   17:    EXPECT_NO_THROW(tree.addEdge(3, 4, 40));
        1:   18:}
------------------
        -:   19:
        4:   20:TEST_F(TreeTest, AddEdgeOutOfRange)
        -:   21:{
       1*:   22:    EXPECT_THROW(tree.addEdge(-1, 1, 10), std::out_of_range);
       1*:   23:    EXPECT_THROW(tree.addEdge(0, 5, 10), std::out_of_range);
       1*:   24:    EXPECT_THROW(tree.addEdge(5, 0, 10), std::out_of_range);
        1:   25:}
------------------
_ZN31TreeTest_AddEdgeOutOfRange_TestC2Ev:
        1:   20:TEST_F(TreeTest, AddEdgeOutOfRange)
------------------
_ZN31TreeTest_AddEdgeOutOfRange_TestD0Ev:
        1:   20:TEST_F(TreeTest, AddEdgeOutOfRange)
------------------
_ZN31TreeTest_AddEdgeOutOfRange_TestD2Ev:
        1:   20:TEST_F(TreeTest, AddEdgeOutOfRange)
------------------
_ZN31TreeTest_AddEdgeOutOfRange_Test8TestBodyEv:
        1:   20:TEST_F(TreeTest, AddEdgeOutOfRange)
        -:   21:{
       1*:   22:    EXPECT_THROW(tree.addEdge(-1, 1, 10), std::out_of_range);
       1*:   23:    EXPECT_THROW(tree.addEdge(0, 5, 10), std::out_of_range);
       1*:   24:    EXPECT_THROW(tree.addEdge(5, 0, 10), std::out_of_range);
        1:   25:}
------------------
        -:   26:
        4:   27:TEST_F(TreeTest, GetNeighbors)
        -:   28:{
        1:   29:    tree.addEdge(0, 1, 10);
        1:   30:    tree.addEdge(0, 2, 20);
        -:   31:
        1:   32:    const auto &neighbors = tree.getNeighbors(0);
       1*:   33:    EXPECT_EQ(neighbors.size(), 2);
       1*:   34:    EXPECT_TRUE(std::find(neighbors.begin(), neighbors.end(), std::make_pair(1, 10)) != neighbors.end());
       1*:   35:    EXPECT_TRUE(std::find(neighbors.begin(), neighbors.end(), std::make_pair(2, 20)) != neighbors.end());
        1:   36:}
------------------
_ZN26TreeTest_GetNeighbors_TestC2Ev:
        1:   27:TEST_F(TreeTest, GetNeighbors)
------------------
_ZN26TreeTest_GetNeighbors_TestD0Ev:
        1:   27:TEST_F(TreeTest, GetNeighbors)
------------------
_ZN26TreeTest_GetNeighbors_TestD2Ev:
        1:   27:TEST_F(TreeTest, GetNeighbors)
------------------
_ZN26TreeTest_GetNeighbors_Test8TestBodyEv:
        1:   27:TEST_F(TreeTest, GetNeighbors)
        -:   28:{
        1:   29:    tree.addEdge(0, 1, 10);
        1:   30:    tree.addEdge(0, 2, 20);
        -:   31:
        1:   32:    const auto &neighbors = tree.getNeighbors(0);
       1*:   33:    EXPECT_EQ(neighbors.size(), 2);
       1*:   34:    EXPECT_TRUE(std::find(neighbors.begin(), neighbors.end(), std::make_pair(1, 10)) != neighbors.end());
       1*:   35:    EXPECT_TRUE(std::find(neighbors.begin(), neighbors.end(), std::make_pair(2, 20)) != neighbors.end());
        1:   36:}
------------------
        -:   37:
        4:   38:TEST_F(TreeTest, GetNeighborsOutOfRange)
        -:   39:{
       1*:   40:    EXPECT_THROW(tree.getNeighbors(-1), std::out_of_range);
       1*:   41:    EXPECT_THROW(tree.getNeighbors(5), std::out_of_range);
        1:   42:}
------------------
_ZN36TreeTest_GetNeighborsOutOfRange_TestC2Ev:
        1:   38:TEST_F(TreeTest, GetNeighborsOutOfRange)
------------------
_ZN36TreeTest_GetNeighborsOutOfRange_TestD0Ev:
        1:   38:TEST_F(TreeTest, GetNeighborsOutOfRange)
------------------
_ZN36TreeTest_GetNeighborsOutOfRange_TestD2Ev:
        1:   38:TEST_F(TreeTest, GetNeighborsOutOfRange)
------------------
_ZN36TreeTest_GetNeighborsOutOfRange_Test8TestBodyEv:
        1:   38:TEST_F(TreeTest, GetNeighborsOutOfRange)
        -:   39:{
       1*:   40:    EXPECT_THROW(tree.getNeighbors(-1), std::out_of_range);
       1*:   41:    EXPECT_THROW(tree.getNeighbors(5), std::out_of_range);
        1:   42:}
------------------
        -:   43:
        4:   44:TEST_F(TreeTest, GetEdges)
        -:   45:{
        1:   46:    tree.addEdge(0, 1, 10);
        1:   47:    tree.addEdge(1, 2, 20);
        1:   48:    tree.addEdge(2, 3, 30);
        1:   49:    tree.addEdge(3, 4, 40);
        -:   50:
        1:   51:    auto edges = tree.getEdges();
       1*:   52:    EXPECT_EQ(edges.size(), 4);
       1*:   53:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(0, std::make_pair(1, 10))) != edges.end());
       1*:   54:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(1, std::make_pair(2, 20))) != edges.end());
       1*:   55:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(2, std::make_pair(3, 30))) != edges.end());
       1*:   56:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(3, std::make_pair(4, 40))) != edges.end());
        1:   57:}
------------------
_ZN22TreeTest_GetEdges_TestC2Ev:
        1:   44:TEST_F(TreeTest, GetEdges)
------------------
_ZN22TreeTest_GetEdges_TestD0Ev:
        1:   44:TEST_F(TreeTest, GetEdges)
------------------
_ZN22TreeTest_GetEdges_TestD2Ev:
        1:   44:TEST_F(TreeTest, GetEdges)
------------------
_ZN22TreeTest_GetEdges_Test8TestBodyEv:
        1:   44:TEST_F(TreeTest, GetEdges)
        -:   45:{
        1:   46:    tree.addEdge(0, 1, 10);
        1:   47:    tree.addEdge(1, 2, 20);
        1:   48:    tree.addEdge(2, 3, 30);
        1:   49:    tree.addEdge(3, 4, 40);
        -:   50:
        1:   51:    auto edges = tree.getEdges();
       1*:   52:    EXPECT_EQ(edges.size(), 4);
       1*:   53:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(0, std::make_pair(1, 10))) != edges.end());
       1*:   54:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(1, std::make_pair(2, 20))) != edges.end());
       1*:   55:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(2, std::make_pair(3, 30))) != edges.end());
       1*:   56:    EXPECT_TRUE(std::find(edges.begin(), edges.end(), std::make_pair(3, std::make_pair(4, 40))) != edges.end());
        1:   57:}
------------------
        -:   58:
        4:   59:TEST_F(TreeTest, GetVertices)
        -:   60:{
       1*:   61:    EXPECT_EQ(tree.getVertices(), 5);
        1:   62:}
------------------
_ZN25TreeTest_GetVertices_TestC2Ev:
        1:   59:TEST_F(TreeTest, GetVertices)
------------------
_ZN25TreeTest_GetVertices_TestD0Ev:
        1:   59:TEST_F(TreeTest, GetVertices)
------------------
_ZN25TreeTest_GetVertices_TestD2Ev:
        1:   59:TEST_F(TreeTest, GetVertices)
------------------
_ZN25TreeTest_GetVertices_Test8TestBodyEv:
        1:   59:TEST_F(TreeTest, GetVertices)
        -:   60:{
       1*:   61:    EXPECT_EQ(tree.getVertices(), 5);
        1:   62:}
------------------
        -:   63:
        4:   64:TEST_F(TreeTest, BidirectionalEdges)
        -:   65:{
        1:   66:    tree.addEdge(0, 1, 10);
        -:   67:
        1:   68:    const auto &neighbors0 = tree.getNeighbors(0);
        1:   69:    const auto &neighbors1 = tree.getNeighbors(1);
        -:   70:
       1*:   71:    EXPECT_EQ(neighbors0.size(), 1);
       1*:   72:    EXPECT_EQ(neighbors1.size(), 1);
       1*:   73:    EXPECT_TRUE(std::find(neighbors0.begin(), neighbors0.end(), std::make_pair(1, 10)) != neighbors0.end());
       1*:   74:    EXPECT_TRUE(std::find(neighbors1.begin(), neighbors1.end(), std::make_pair(0, 10)) != neighbors1.end());
        1:   75:}
------------------
_ZN32TreeTest_BidirectionalEdges_TestC2Ev:
        1:   64:TEST_F(TreeTest, BidirectionalEdges)
------------------
_ZN32TreeTest_BidirectionalEdges_TestD0Ev:
        1:   64:TEST_F(TreeTest, BidirectionalEdges)
------------------
_ZN32TreeTest_BidirectionalEdges_TestD2Ev:
        1:   64:TEST_F(TreeTest, BidirectionalEdges)
------------------
_ZN32TreeTest_BidirectionalEdges_Test8TestBodyEv:
        1:   64:TEST_F(TreeTest, BidirectionalEdges)
        -:   65:{
        1:   66:    tree.addEdge(0, 1, 10);
        -:   67:
        1:   68:    const auto &neighbors0 = tree.getNeighbors(0);
        1:   69:    const auto &neighbors1 = tree.getNeighbors(1);
        -:   70:
       1*:   71:    EXPECT_EQ(neighbors0.size(), 1);
       1*:   72:    EXPECT_EQ(neighbors1.size(), 1);
       1*:   73:    EXPECT_TRUE(std::find(neighbors0.begin(), neighbors0.end(), std::make_pair(1, 10)) != neighbors0.end());
       1*:   74:    EXPECT_TRUE(std::find(neighbors1.begin(), neighbors1.end(), std::make_pair(0, 10)) != neighbors1.end());
        1:   75:}
------------------
