        -:    0:Source:src/tests/mst-analysis-tests.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "analysis/MSTAnalysis.hpp"
        -:    3:#include "graph/Graph.hpp"
        -:    4:#include <vector>
        -:    5:#include <future>
        -:    6:#include <chrono>
        -:    7:
        -:    8:class MSTAnalysisTest : public ::testing::Test
        -:    9:{
        -:   10:protected:
        -:   11:    Graph graph{5}; // Create a graph with 5 vertices
        -:   12:    std::vector<std::pair<int, std::pair<int, int>>> mst;
        -:   13:
        7:   14:    void SetUp() override
        -:   15:    {
        -:   16:        // Set up a sample MST
        7:   17:        graph.addEdge(0, 1, 2);
        7:   18:        graph.addEdge(1, 2, 3);
        7:   19:        graph.addEdge(2, 3, 4);
        7:   20:        graph.addEdge(3, 4, 5);
        -:   21:
        7:   22:        mst = {
        -:   23:            {2, {0, 1}},
        -:   24:            {3, {1, 2}},
        -:   25:            {4, {2, 3}},
        7:   26:            {5, {3, 4}}};
        7:   27:    }
        -:   28:};
        -:   29:
        4:   30:TEST_F(MSTAnalysisTest, CalculateTotalWeightAsync)
        -:   31:{
        1:   32:    auto future = calculateTotalWeightAsync(mst);
       1*:   33:    EXPECT_EQ(future.get(), 14); // 2 + 3 + 4 + 5 = 14
        1:   34:}
------------------
_ZN46MSTAnalysisTest_CalculateTotalWeightAsync_TestC2Ev:
        1:   30:TEST_F(MSTAnalysisTest, CalculateTotalWeightAsync)
------------------
_ZN46MSTAnalysisTest_CalculateTotalWeightAsync_TestD0Ev:
        1:   30:TEST_F(MSTAnalysisTest, CalculateTotalWeightAsync)
------------------
_ZN46MSTAnalysisTest_CalculateTotalWeightAsync_TestD2Ev:
        1:   30:TEST_F(MSTAnalysisTest, CalculateTotalWeightAsync)
------------------
_ZN46MSTAnalysisTest_CalculateTotalWeightAsync_Test8TestBodyEv:
        1:   30:TEST_F(MSTAnalysisTest, CalculateTotalWeightAsync)
        -:   31:{
        1:   32:    auto future = calculateTotalWeightAsync(mst);
       1*:   33:    EXPECT_EQ(future.get(), 14); // 2 + 3 + 4 + 5 = 14
        1:   34:}
------------------
        -:   35:
        4:   36:TEST_F(MSTAnalysisTest, FindLongestDistanceAsync)
        -:   37:{
        1:   38:    auto future = findLongestDistanceAsync(graph, mst);
       1*:   39:    EXPECT_EQ(future.get(), 14); // Longest path: 0 -> 1 -> 2 -> 3 -> 4
        1:   40:}
------------------
_ZN45MSTAnalysisTest_FindLongestDistanceAsync_TestC2Ev:
        1:   36:TEST_F(MSTAnalysisTest, FindLongestDistanceAsync)
------------------
_ZN45MSTAnalysisTest_FindLongestDistanceAsync_TestD0Ev:
        1:   36:TEST_F(MSTAnalysisTest, FindLongestDistanceAsync)
------------------
_ZN45MSTAnalysisTest_FindLongestDistanceAsync_TestD2Ev:
        1:   36:TEST_F(MSTAnalysisTest, FindLongestDistanceAsync)
------------------
_ZN45MSTAnalysisTest_FindLongestDistanceAsync_Test8TestBodyEv:
        1:   36:TEST_F(MSTAnalysisTest, FindLongestDistanceAsync)
        -:   37:{
        1:   38:    auto future = findLongestDistanceAsync(graph, mst);
       1*:   39:    EXPECT_EQ(future.get(), 14); // Longest path: 0 -> 1 -> 2 -> 3 -> 4
        1:   40:}
------------------
        -:   41:
        4:   42:TEST_F(MSTAnalysisTest, CalculateAverageDistanceAsync)
        -:   43:{
        1:   44:    auto future = calculateAverageDistanceAsync(graph, mst);
        1:   45:    double expected = (2.0 + 5.0 + 9.0 + 14.0) / 4.0; // Average of all possible paths
       1*:   46:    EXPECT_NEAR(future.get(), expected, 0.5);
        1:   47:}
------------------
_ZN50MSTAnalysisTest_CalculateAverageDistanceAsync_TestC2Ev:
        1:   42:TEST_F(MSTAnalysisTest, CalculateAverageDistanceAsync)
------------------
_ZN50MSTAnalysisTest_CalculateAverageDistanceAsync_TestD0Ev:
        1:   42:TEST_F(MSTAnalysisTest, CalculateAverageDistanceAsync)
------------------
_ZN50MSTAnalysisTest_CalculateAverageDistanceAsync_TestD2Ev:
        1:   42:TEST_F(MSTAnalysisTest, CalculateAverageDistanceAsync)
------------------
_ZN50MSTAnalysisTest_CalculateAverageDistanceAsync_Test8TestBodyEv:
        1:   42:TEST_F(MSTAnalysisTest, CalculateAverageDistanceAsync)
        -:   43:{
        1:   44:    auto future = calculateAverageDistanceAsync(graph, mst);
        1:   45:    double expected = (2.0 + 5.0 + 9.0 + 14.0) / 4.0; // Average of all possible paths
       1*:   46:    EXPECT_NEAR(future.get(), expected, 0.5);
        1:   47:}
------------------
        -:   48:
        4:   49:TEST_F(MSTAnalysisTest, FindShortestMSTEdgeAsync)
        -:   50:{
        1:   51:    auto future = findShortestMSTEdgeAsync(mst);
       1*:   52:    EXPECT_EQ(future.get(), 2); // The shortest edge in the MST
        1:   53:}
------------------
_ZN45MSTAnalysisTest_FindShortestMSTEdgeAsync_TestC2Ev:
        1:   49:TEST_F(MSTAnalysisTest, FindShortestMSTEdgeAsync)
------------------
_ZN45MSTAnalysisTest_FindShortestMSTEdgeAsync_TestD0Ev:
        1:   49:TEST_F(MSTAnalysisTest, FindShortestMSTEdgeAsync)
------------------
_ZN45MSTAnalysisTest_FindShortestMSTEdgeAsync_TestD2Ev:
        1:   49:TEST_F(MSTAnalysisTest, FindShortestMSTEdgeAsync)
------------------
_ZN45MSTAnalysisTest_FindShortestMSTEdgeAsync_Test8TestBodyEv:
        1:   49:TEST_F(MSTAnalysisTest, FindShortestMSTEdgeAsync)
        -:   50:{
        1:   51:    auto future = findShortestMSTEdgeAsync(mst);
       1*:   52:    EXPECT_EQ(future.get(), 2); // The shortest edge in the MST
        1:   53:}
------------------
        -:   54:
        4:   55:TEST_F(MSTAnalysisTest, EmptyMST)
        -:   56:{
        1:   57:    std::vector<std::pair<int, std::pair<int, int>>> emptyMST;
        -:   58:
        1:   59:    auto totalWeightFuture = calculateTotalWeightAsync(emptyMST);
       1*:   60:    EXPECT_EQ(totalWeightFuture.get(), 0);
        -:   61:
        1:   62:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(emptyMST);
       1*:   63:    EXPECT_EQ(shortestEdgeFuture.get(), 0);
        1:   64:}
------------------
_ZN29MSTAnalysisTest_EmptyMST_TestC2Ev:
        1:   55:TEST_F(MSTAnalysisTest, EmptyMST)
------------------
_ZN29MSTAnalysisTest_EmptyMST_TestD0Ev:
        1:   55:TEST_F(MSTAnalysisTest, EmptyMST)
------------------
_ZN29MSTAnalysisTest_EmptyMST_TestD2Ev:
        1:   55:TEST_F(MSTAnalysisTest, EmptyMST)
------------------
_ZN29MSTAnalysisTest_EmptyMST_Test8TestBodyEv:
        1:   55:TEST_F(MSTAnalysisTest, EmptyMST)
        -:   56:{
        1:   57:    std::vector<std::pair<int, std::pair<int, int>>> emptyMST;
        -:   58:
        1:   59:    auto totalWeightFuture = calculateTotalWeightAsync(emptyMST);
       1*:   60:    EXPECT_EQ(totalWeightFuture.get(), 0);
        -:   61:
        1:   62:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(emptyMST);
       1*:   63:    EXPECT_EQ(shortestEdgeFuture.get(), 0);
        1:   64:}
------------------
        -:   65:
        4:   66:TEST_F(MSTAnalysisTest, ConcurrentExecution)
        -:   67:{
        1:   68:    auto start = std::chrono::high_resolution_clock::now();
        -:   69:
        1:   70:    auto totalWeightFuture = calculateTotalWeightAsync(mst);
        1:   71:    auto longestDistanceFuture = findLongestDistanceAsync(graph, mst);
        1:   72:    auto averageDistanceFuture = calculateAverageDistanceAsync(graph, mst);
        1:   73:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(mst);
        -:   74:
        1:   75:    totalWeightFuture.get();
        1:   76:    longestDistanceFuture.get();
        1:   77:    averageDistanceFuture.get();
        1:   78:    shortestEdgeFuture.get();
        -:   79:
        1:   80:    auto end = std::chrono::high_resolution_clock::now();
        1:   81:    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        -:   82:
        -:   83:    // This test assumes that concurrent execution should be faster than sequential
        -:   84:    // The exact time will depend on the machine, but it should be significantly less than the sum of individual operations
       1*:   85:    EXPECT_LT(duration.count(), 1000); // Adjust this value based on your system's performance
        1:   86:}
------------------
_ZN40MSTAnalysisTest_ConcurrentExecution_TestC2Ev:
        1:   66:TEST_F(MSTAnalysisTest, ConcurrentExecution)
------------------
_ZN40MSTAnalysisTest_ConcurrentExecution_TestD0Ev:
        1:   66:TEST_F(MSTAnalysisTest, ConcurrentExecution)
------------------
_ZN40MSTAnalysisTest_ConcurrentExecution_TestD2Ev:
        1:   66:TEST_F(MSTAnalysisTest, ConcurrentExecution)
------------------
_ZN40MSTAnalysisTest_ConcurrentExecution_Test8TestBodyEv:
        1:   66:TEST_F(MSTAnalysisTest, ConcurrentExecution)
        -:   67:{
        1:   68:    auto start = std::chrono::high_resolution_clock::now();
        -:   69:
        1:   70:    auto totalWeightFuture = calculateTotalWeightAsync(mst);
        1:   71:    auto longestDistanceFuture = findLongestDistanceAsync(graph, mst);
        1:   72:    auto averageDistanceFuture = calculateAverageDistanceAsync(graph, mst);
        1:   73:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(mst);
        -:   74:
        1:   75:    totalWeightFuture.get();
        1:   76:    longestDistanceFuture.get();
        1:   77:    averageDistanceFuture.get();
        1:   78:    shortestEdgeFuture.get();
        -:   79:
        1:   80:    auto end = std::chrono::high_resolution_clock::now();
        1:   81:    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        -:   82:
        -:   83:    // This test assumes that concurrent execution should be faster than sequential
        -:   84:    // The exact time will depend on the machine, but it should be significantly less than the sum of individual operations
       1*:   85:    EXPECT_LT(duration.count(), 1000); // Adjust this value based on your system's performance
        1:   86:}
------------------
        -:   87:
        4:   88:TEST_F(MSTAnalysisTest, NegativeWeights)
        -:   89:{
        1:   90:    mst.push_back({-1, {4, 0}}); // Add a negative weight edge
        -:   91:
        1:   92:    auto totalWeightFuture = calculateTotalWeightAsync(mst);
       1*:   93:    EXPECT_EQ(totalWeightFuture.get(), 14); // The negative weight should be ignored
        -:   94:
        1:   95:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(mst);
       1*:   96:    EXPECT_EQ(shortestEdgeFuture.get(), -1); // The negative weight should not affect the shortest edge
        1:   97:}
------------------
_ZN36MSTAnalysisTest_NegativeWeights_TestC2Ev:
        1:   88:TEST_F(MSTAnalysisTest, NegativeWeights)
------------------
_ZN36MSTAnalysisTest_NegativeWeights_TestD0Ev:
        1:   88:TEST_F(MSTAnalysisTest, NegativeWeights)
------------------
_ZN36MSTAnalysisTest_NegativeWeights_TestD2Ev:
        1:   88:TEST_F(MSTAnalysisTest, NegativeWeights)
------------------
_ZN36MSTAnalysisTest_NegativeWeights_Test8TestBodyEv:
        1:   88:TEST_F(MSTAnalysisTest, NegativeWeights)
        -:   89:{
        1:   90:    mst.push_back({-1, {4, 0}}); // Add a negative weight edge
        -:   91:
        1:   92:    auto totalWeightFuture = calculateTotalWeightAsync(mst);
       1*:   93:    EXPECT_EQ(totalWeightFuture.get(), 14); // The negative weight should be ignored
        -:   94:
        1:   95:    auto shortestEdgeFuture = findShortestMSTEdgeAsync(mst);
       1*:   96:    EXPECT_EQ(shortestEdgeFuture.get(), -1); // The negative weight should not affect the shortest edge
        1:   97:}
------------------
