        -:    0:Source:src/tests/mst-factory-tests.cpp
        -:    1:#include <gtest/gtest.h>
        -:    2:#include "factory/MSTFactory.hpp"
        -:    3:#include "mst/BoruvkaMST.hpp"
        -:    4:#include "mst/PrimMST.hpp"
        -:    5:#include "mst/KruskalMST.hpp"
        -:    6:#include "mst/TarjanMST.hpp"
        -:    7:#include "mst/IntegerMST.hpp"
        -:    8:#include <memory>
        -:    9:#include <typeinfo>
        -:   10:
        -:   11:class MSTFactoryTest : public ::testing::Test {};
        -:   12:
        4:   13:TEST_F(MSTFactoryTest, CreateBoruvkaMST) {
        1:   14:    auto mst = MSTFactory::createMSTAlgorithm("Boruvka");
       1*:   15:    EXPECT_NE(mst, nullptr);
       1*:   16:    EXPECT_EQ(typeid(*mst), typeid(BoruvkaMST));
        1:   17:}
------------------
_ZN36MSTFactoryTest_CreateBoruvkaMST_TestC2Ev:
        1:   13:TEST_F(MSTFactoryTest, CreateBoruvkaMST) {
------------------
_ZN36MSTFactoryTest_CreateBoruvkaMST_TestD0Ev:
        1:   13:TEST_F(MSTFactoryTest, CreateBoruvkaMST) {
------------------
_ZN36MSTFactoryTest_CreateBoruvkaMST_TestD2Ev:
        1:   13:TEST_F(MSTFactoryTest, CreateBoruvkaMST) {
------------------
_ZN36MSTFactoryTest_CreateBoruvkaMST_Test8TestBodyEv:
        1:   13:TEST_F(MSTFactoryTest, CreateBoruvkaMST) {
        1:   14:    auto mst = MSTFactory::createMSTAlgorithm("Boruvka");
       1*:   15:    EXPECT_NE(mst, nullptr);
       1*:   16:    EXPECT_EQ(typeid(*mst), typeid(BoruvkaMST));
        1:   17:}
------------------
        -:   18:
        4:   19:TEST_F(MSTFactoryTest, CreatePrimMST) {
        1:   20:    auto mst = MSTFactory::createMSTAlgorithm("Prim");
       1*:   21:    EXPECT_NE(mst, nullptr);
       1*:   22:    EXPECT_EQ(typeid(*mst), typeid(PrimMST));
        1:   23:}
------------------
_ZN33MSTFactoryTest_CreatePrimMST_TestC2Ev:
        1:   19:TEST_F(MSTFactoryTest, CreatePrimMST) {
------------------
_ZN33MSTFactoryTest_CreatePrimMST_TestD0Ev:
        1:   19:TEST_F(MSTFactoryTest, CreatePrimMST) {
------------------
_ZN33MSTFactoryTest_CreatePrimMST_TestD2Ev:
        1:   19:TEST_F(MSTFactoryTest, CreatePrimMST) {
------------------
_ZN33MSTFactoryTest_CreatePrimMST_Test8TestBodyEv:
        1:   19:TEST_F(MSTFactoryTest, CreatePrimMST) {
        1:   20:    auto mst = MSTFactory::createMSTAlgorithm("Prim");
       1*:   21:    EXPECT_NE(mst, nullptr);
       1*:   22:    EXPECT_EQ(typeid(*mst), typeid(PrimMST));
        1:   23:}
------------------
        -:   24:
        4:   25:TEST_F(MSTFactoryTest, CreateKruskalMST) {
        1:   26:    auto mst = MSTFactory::createMSTAlgorithm("Kruskal");
       1*:   27:    EXPECT_NE(mst, nullptr);
       1*:   28:    EXPECT_EQ(typeid(*mst), typeid(KruskalMST));
        1:   29:}
------------------
_ZN36MSTFactoryTest_CreateKruskalMST_TestC2Ev:
        1:   25:TEST_F(MSTFactoryTest, CreateKruskalMST) {
------------------
_ZN36MSTFactoryTest_CreateKruskalMST_TestD0Ev:
        1:   25:TEST_F(MSTFactoryTest, CreateKruskalMST) {
------------------
_ZN36MSTFactoryTest_CreateKruskalMST_TestD2Ev:
        1:   25:TEST_F(MSTFactoryTest, CreateKruskalMST) {
------------------
_ZN36MSTFactoryTest_CreateKruskalMST_Test8TestBodyEv:
        1:   25:TEST_F(MSTFactoryTest, CreateKruskalMST) {
        1:   26:    auto mst = MSTFactory::createMSTAlgorithm("Kruskal");
       1*:   27:    EXPECT_NE(mst, nullptr);
       1*:   28:    EXPECT_EQ(typeid(*mst), typeid(KruskalMST));
        1:   29:}
------------------
        -:   30:
        4:   31:TEST_F(MSTFactoryTest, CreateTarjanMST) {
        1:   32:    auto mst = MSTFactory::createMSTAlgorithm("Tarjan");
       1*:   33:    EXPECT_NE(mst, nullptr);
       1*:   34:    EXPECT_EQ(typeid(*mst), typeid(TarjanMST));
        1:   35:}
------------------
_ZN35MSTFactoryTest_CreateTarjanMST_TestC2Ev:
        1:   31:TEST_F(MSTFactoryTest, CreateTarjanMST) {
------------------
_ZN35MSTFactoryTest_CreateTarjanMST_TestD0Ev:
        1:   31:TEST_F(MSTFactoryTest, CreateTarjanMST) {
------------------
_ZN35MSTFactoryTest_CreateTarjanMST_TestD2Ev:
        1:   31:TEST_F(MSTFactoryTest, CreateTarjanMST) {
------------------
_ZN35MSTFactoryTest_CreateTarjanMST_Test8TestBodyEv:
        1:   31:TEST_F(MSTFactoryTest, CreateTarjanMST) {
        1:   32:    auto mst = MSTFactory::createMSTAlgorithm("Tarjan");
       1*:   33:    EXPECT_NE(mst, nullptr);
       1*:   34:    EXPECT_EQ(typeid(*mst), typeid(TarjanMST));
        1:   35:}
------------------
        -:   36:
        4:   37:TEST_F(MSTFactoryTest, CreateIntegerMST) {
        1:   38:    auto mst = MSTFactory::createMSTAlgorithm("Integer");
       1*:   39:    EXPECT_NE(mst, nullptr);
       1*:   40:    EXPECT_EQ(typeid(*mst), typeid(IntegerMST));
        1:   41:}
------------------
_ZN36MSTFactoryTest_CreateIntegerMST_TestC2Ev:
        1:   37:TEST_F(MSTFactoryTest, CreateIntegerMST) {
------------------
_ZN36MSTFactoryTest_CreateIntegerMST_TestD0Ev:
        1:   37:TEST_F(MSTFactoryTest, CreateIntegerMST) {
------------------
_ZN36MSTFactoryTest_CreateIntegerMST_TestD2Ev:
        1:   37:TEST_F(MSTFactoryTest, CreateIntegerMST) {
------------------
_ZN36MSTFactoryTest_CreateIntegerMST_Test8TestBodyEv:
        1:   37:TEST_F(MSTFactoryTest, CreateIntegerMST) {
        1:   38:    auto mst = MSTFactory::createMSTAlgorithm("Integer");
       1*:   39:    EXPECT_NE(mst, nullptr);
       1*:   40:    EXPECT_EQ(typeid(*mst), typeid(IntegerMST));
        1:   41:}
------------------
        -:   42:
        4:   43:TEST_F(MSTFactoryTest, CreateUnknownMST) {
       3*:   44:    EXPECT_THROW(MSTFactory::createMSTAlgorithm("UnknownAlgorithm"), std::invalid_argument);
        1:   45:}
------------------
_ZN36MSTFactoryTest_CreateUnknownMST_TestC2Ev:
        1:   43:TEST_F(MSTFactoryTest, CreateUnknownMST) {
------------------
_ZN36MSTFactoryTest_CreateUnknownMST_TestD0Ev:
        1:   43:TEST_F(MSTFactoryTest, CreateUnknownMST) {
------------------
_ZN36MSTFactoryTest_CreateUnknownMST_TestD2Ev:
        1:   43:TEST_F(MSTFactoryTest, CreateUnknownMST) {
------------------
_ZN36MSTFactoryTest_CreateUnknownMST_Test8TestBodyEv:
        1:   43:TEST_F(MSTFactoryTest, CreateUnknownMST) {
       3*:   44:    EXPECT_THROW(MSTFactory::createMSTAlgorithm("UnknownAlgorithm"), std::invalid_argument);
        1:   45:}
------------------
